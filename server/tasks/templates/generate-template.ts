import { writeFile } from "fs/promises";
import { join } from "path";

interface TemplateGeneratorOptions {
  name: string;
  description?: string;
  mealsCount?: number;
  categoriesPerMeal?: string[];
  withExampleIngredients?: boolean;
}

export default defineTask({
  meta: {
    name: "templates:generate",
    description: "Generate a new template JSON file with example structure",
  },
  run: async ({ payload, context }) => {
    try {
      const options = payload as unknown as TemplateGeneratorOptions;

      if (!options.name) {
        throw new Error("Template name is required in payload");
      }

      console.log(`üöÄ Generating template: ${options.name}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaults
      const mealsCount = options.mealsCount || 5;
      const categoriesPerMeal = options.categoriesPerMeal || [
        "–∞",
        "–±",
        "–≤",
        "–≥",
        "–¥",
      ];
      const withExampleIngredients = options.withExampleIngredients !== false;

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
      const template = {
        name: options.name,
        description:
          options.description || `–®–∞–±–ª–æ–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è: ${options.name}`,
        meals: [] as any[],
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meals
      for (let i = 1; i <= mealsCount; i++) {
        const meal = {
          name: `${i}Ô∏è‚É£ –ø—Ä–∏–π–æ–º —ó–∂—ñ`,
          categories: [] as any[],
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ meal
        for (const categoryLetter of categoriesPerMeal) {
          const category = {
            name: categoryLetter,
            description: getCategoryDescription(categoryLetter),
            targetCalories: getCategoryTargetCalories(categoryLetter),
            ingredients: [] as any[],
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (withExampleIngredients) {
            category.ingredients = getExampleIngredients(categoryLetter);
          }

          meal.categories.push(category);
        }

        template.meals.push(meal);
      }

      // –°–æ–∑–¥–∞–µ–º filename –∏–∑ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
      const filename =
        options.name
          .toLowerCase()
          .replace(/[^a-z–∞-—è0-9]/g, "-")
          .replace(/-+/g, "-")
          .replace(/^-|-$/g, "") + ".json";

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const filePath = join(process.cwd(), "data", "templates", filename);
      await writeFile(filePath, JSON.stringify(template, null, 2), "utf-8");

      console.log(`‚úÖ Template generated: ${filename}`);
      console.log(`üìÅ File saved to: data/templates/${filename}`);
      console.log(
        `üçΩÔ∏è  Generated ${mealsCount} meals with ${categoriesPerMeal.length} categories each`
      );

      if (withExampleIngredients) {
        const totalIngredients = template.meals.reduce(
          (total, meal) =>
            total +
            meal.categories.reduce(
              (catTotal: number, cat: any) => catTotal + cat.ingredients.length,
              0
            ),
          0
        );
        console.log(`ü•ó Added ${totalIngredients} example ingredients`);
      }

      console.log(`\nüí° Next steps:`);
      console.log(
        `   1. Edit data/templates/${filename} to customize your template`
      );
      console.log(`   2. Run: pnpm migrate to import the template`);

      return {
        result: {
          filename,
          filePath,
          mealsCount,
          categoriesCount: categoriesPerMeal.length,
          totalIngredients: withExampleIngredients
            ? template.meals.reduce(
                (total, meal) =>
                  total +
                  meal.categories.reduce(
                    (catTotal: number, cat: any) =>
                      catTotal + cat.ingredients.length,
                    0
                  ),
                0
              )
            : 0,
        },
      };
    } catch (error) {
      console.error("‚ùå Template generation failed:", error);
      throw error;
    }
  },
});

function getCategoryDescription(letter: string): string {
  const descriptions: Record<string, string> = {
    –∞: "–í—É–≥–ª–µ–≤–æ–¥–∏",
    –±: "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏",
    –≤: "–í—ñ–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
    –≥: "–ú'—è—Å–æ —Ç–∞ —Ä–∏–±–∞",
    –¥: "–û–≤–æ—á—ñ",
    –µ: "–§—Ä—É–∫—Ç–∏",
    —î: "–ñ–∏—Ä–∏",
    –∂: "–ì–æ—Ä—ñ—Ö–∏ —Ç–∞ –Ω–∞—Å—ñ–Ω–Ω—è",
    –∑: "–ó–ª–∞–∫–∏",
    –∏: "–Ø–π—Ü—è",
    —ñ: "–ë–æ–±–æ–≤—ñ",
    —ó: "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏",
    –π: "–î–æ–¥–∞—Ç–∫–∏",
  };
  return descriptions[letter] || `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${letter}`;
}

function getCategoryTargetCalories(letter: string): number {
  const calories: Record<string, number> = {
    –∞: 110,
    –±: 65,
    –≤: 450,
    –≥: 120,
    –¥: 25,
    –µ: 60,
    —î: 45,
    –∂: 165,
    –∑: 110,
    –∏: 75,
    —ñ: 110,
    —ó: 120,
    –π: 20,
  };
  return calories[letter] || 100;
}

function getExampleIngredients(letter: string): any[] {
  const ingredients: Record<string, any[]> = {
    –∞: [
      { name: "–ë–æ–±–æ–≤—ñ", calories: 110, proteins: 8, grams: 30 },
      { name: "–ö–∞—Ä—Ç–æ–ø–ª—è", calories: 110, proteins: 2, grams: 100 },
      { name: "–†–∏—Å (–Ω–µ —à–ª—ñ—Ñ–æ–≤–∞–Ω–∏–π)", calories: 110, proteins: 3, grams: 30 },
    ],
    –±: [
      { name: "–ö–µ—Ñ—ñ—Ä 1%", calories: 65, proteins: 4, grams: 135 },
      { name: "–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∏–π", calories: 65, proteins: 4, grams: 125 },
      {
        name: "–°–∏—Ä –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω–∏–π –Ω–µ–∂–∏—Ä–Ω–∏–π",
        calories: 65,
        proteins: 12,
        grams: 70,
      },
    ],
    –≤: [
      {
        name: "–ë—É–¥—å-—â–æ (—Å–æ–ª–æ–¥–æ—â—ñ, —Å–Ω–µ–∫–∏ —Ç–æ—â–æ)",
        calories: 450,
        proteins: 5,
        grams: 90,
      },
    ],
    –≥: [
      { name: "–ö—É—Ä–∫–∞ –±–µ–∑ —à–∫—ñ—Ä–∏", calories: 120, proteins: 25, grams: 60 },
      { name: "–†–∏–±–∞ –Ω–µ–∂–∏—Ä–Ω–∞", calories: 120, proteins: 24, grams: 70 },
      { name: "–Ø–ª–æ–≤–∏—á–∏–Ω–∞ –Ω–µ–∂–∏—Ä–Ω–∞", calories: 120, proteins: 22, grams: 55 },
    ],
    –¥: [
      { name: "–ö–∞–ø—É—Å—Ç–∞", calories: 25, proteins: 2, grams: 100 },
      { name: "–ü–æ–º—ñ–¥–æ—Ä–∏", calories: 25, proteins: 1, grams: 140 },
      { name: "–û–≥—ñ—Ä–∫–∏", calories: 25, proteins: 1, grams: 200 },
    ],
  };

  return (
    ingredients[letter] || [
      {
        name: `–ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞ ${letter}`,
        calories: 100,
        proteins: 5,
        grams: 50,
      },
    ]
  );
}
