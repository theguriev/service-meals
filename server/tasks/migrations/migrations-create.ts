import { readFile, writeFile } from "fs/promises";
import { join } from "path";

interface MigrationHelperOptions {
  templateName: string;
  migrationName?: string;
  description?: string;
}

export default defineTask({
  meta: {
    name: "migrations:create",
    description: "Create a new migration file for a template",
  },
  run: async ({ payload, context }) => {
    try {
      const options = payload as unknown as MigrationHelperOptions;

      if (!options.templateName) {
        throw new Error("Template name is required in payload");
      }

      console.log(
        `üöÄ Creating migration for template: ${options.templateName}`
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      const migrationName =
        options.migrationName ||
        options.templateName
          .toLowerCase()
          .replace(/[^a-z–∞-—è0-9]/g, "-")
          .replace(/-+/g, "-")
          .replace(/^-|-$/g, "");

      const description =
        options.description || `Migration for ${options.templateName} template`;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è timestamp
      const timestamp = new Date()
        .toISOString()
        .replace(/[^0-9]/g, "")
        .slice(0, 14);
      const filename = `${timestamp}-${migrationName}.ts`;

      // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationContent = `import { readFile } from 'fs/promises';
import { join } from 'path';

interface TemplateIngredient {
  name: string;
  calories: number;
  proteins: number;
  grams: number;
}

interface TemplateCategory {
  name: string;
  description?: string;
  targetCalories?: number;
  ingredients: TemplateIngredient[];
}

interface TemplateMeal {
  name: string;
  categories: TemplateCategory[];
}

interface TemplateData {
  name: string;
  description?: string;
  meals: TemplateMeal[];
}

export default defineTask({
  meta: {
    name: "db:migrate-${migrationName}",
    description: "${description}",
  },
  run: async ({ payload, context }) => {
    try {
      console.log("üöÄ Starting migration: ${options.templateName}");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const existingTemplate = await ModelTemplate.findOne({ name: "${options.templateName}" });
      if (existingTemplate) {
        console.log(\`‚è≠Ô∏è  Template "\${existingTemplate.name}" already exists, skipping...\`);
        return {
          result: {
            templateId: existingTemplate._id,
            templateName: existingTemplate.name,
            skipped: true
          }
        };
      }

      // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞
      const filePath = join(process.cwd(), 'data', 'templates', '${migrationName}.json');
      const fileContent = await readFile(filePath, 'utf-8');
      const templateData: TemplateData = JSON.parse(fileContent);

      console.log(\`üìã Template: \${templateData.name}\`);
      if (templateData.description) {
        console.log(\`üí≠ Description: \${templateData.description}\`);
      }

      // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π template
      const template = new ModelTemplate({
        name: templateData.name,
        description: templateData.description,
      });
      const savedTemplate = await template.save();
      console.log(\`‚úÖ Created template: \${savedTemplate.name} (\${savedTemplate._id})\`);

      // 2. –°–æ–∑–¥–∞–µ–º meals, categories –∏ ingredients
      let totalMeals = 0;
      let totalCategories = 0;
      let totalIngredients = 0;

      for (const mealData of templateData.meals) {
        // –°–æ–∑–¥–∞–µ–º meal
        const meal = new ModelMeals({
          templateId: savedTemplate._id,
          name: mealData.name,
        });
        const savedMeal = await meal.save();
        totalMeals++;
        console.log(\`  ‚úÖ Created meal: \${savedMeal.name} (\${savedMeal._id})\`);

        // –°–æ–∑–¥–∞–µ–º categories –¥–ª—è meal
        for (const categoryData of mealData.categories) {
          const category = new ModelCategories({
            mealId: savedMeal._id,
            name: categoryData.name,
            description: categoryData.description,
            targetCalories: categoryData.targetCalories,
          });
          const savedCategory = await category.save();
          totalCategories++;
          console.log(\`    ‚úÖ Created category: \${savedCategory.name} (\${savedCategory._id}) - \${categoryData.description || 'No description'}\`);

          // –°–æ–∑–¥–∞–µ–º ingredients –¥–ª—è category
          for (const ingredientData of categoryData.ingredients) {
            const ingredient = new ModelIngredients({
              categoryId: savedCategory._id,
              name: ingredientData.name,
              calories: ingredientData.calories,
              proteins: ingredientData.proteins,
              grams: ingredientData.grams,
            });
            await ingredient.save();
            totalIngredients++;
          }
          
          console.log(\`      ü•ó Created \${categoryData.ingredients.length} ingredients for category "\${categoryData.name}"\`);
        }
      }

      console.log(\`\`);
      console.log(\`‚úÖ Migration completed successfully!\`);
      console.log(\`üìä Statistics:\`);
      console.log(\`   üçΩÔ∏è  Meals created: \${totalMeals}\`);
      console.log(\`   üìÇ Categories created: \${totalCategories}\`);
      console.log(\`   ü•ó Ingredients created: \${totalIngredients}\`);

      return {
        result: {
          templateId: savedTemplate._id,
          templateName: savedTemplate.name,
          mealsCreated: totalMeals,
          categoriesCreated: totalCategories,
          ingredientsCreated: totalIngredients,
          created: true
        }
      };
    } catch (error) {
      console.error("‚ùå Migration failed:", error);
      throw error;
    }
  }
});`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationPath = join(
        process.cwd(),
        "server",
        "tasks",
        "migrations",
        filename
      );
      await writeFile(migrationPath, migrationContent, "utf-8");

      console.log(`‚úÖ Migration created: ${filename}`);
      console.log(`üìÅ File saved to: server/tasks/migrations/${filename}`);
      console.log(`\nüí° Next steps:`);
      console.log(
        `   1. Make sure you have data/templates/${migrationName}.json with template data`
      );
      console.log(
        `   2. Run the migration: npx nitro-task db:migrate-${migrationName}`
      );

      return {
        result: {
          filename,
          migrationPath,
          migrationName,
          templateName: options.templateName,
          taskName: `db:migrate-${migrationName}`,
        },
      };
    } catch (error) {
      console.error("‚ùå Migration creation failed:", error);
      throw error;
    }
  },
});
