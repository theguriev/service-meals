{
  "openapi": "3.0.0",
  "info": {
    "title": "Meals Service API",
    "version": "1.0.0",
    "description": "API for managing meals."
  },
  "servers": [
    {
      "url": "/api",
      "description": "Main API server"
    }
  ],
  "components": {
    "schemas": {
      "Meal": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the meal (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000000"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the meal",
            "example": "user123"
          },
          "name": {
            "type": "string",
            "description": "Name of the meal",
            "example": "Spaghetti Carbonara"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the meal was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the meal was last updated",
            "readOnly": true
          }
        },
        "required": ["userId", "name"]
      },
      "MealInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the meal",
            "minLength": 1,
            "example": "Chicken Salad"
          }
        },
        "required": ["name"]
      },
      "MealUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the meal (optional for update)",
            "minLength": 1,
            "example": "Deluxe Chicken Salad"
          }
        }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation successful"
          }
        }
      },
      "MealCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item added successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Meal"
          }
        }
      },
      "MealUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item updated successfully"
          },
          "ingredient": {
            "$ref": "#/components/schemas/Meal"
          }
        }
      },
      "MealWithCategoriesAndIngredients": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the meal (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000000"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the meal",
            "example": "user123"
          },
          "name": {
            "type": "string",
            "description": "Name of the meal",
            "example": "Spaghetti Carbonara"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the meal was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the meal was last updated",
            "readOnly": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryWithIngredients"
            }
          }
        },
        "required": ["userId", "name", "categories"]
      },
      "CategoryWithIngredients": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the category (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000001"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the category",
            "example": "user123"
          },
          "mealId": {
            "type": "string",
            "description": "Identifier of the meal this category belongs to",
            "example": "605c72ef29592b001c000000"
          },
          "name": {
            "type": "string",
            "description": "Name of the category",
            "example": "Breakfast"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the category was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the category was last updated",
            "readOnly": true
          },
          "ingredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ingredient"
            }
          }
        },
        "required": ["userId", "mealId", "name", "ingredients"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message detailing what went wrong",
            "example": "Invalid input"
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "statusMessage": {
            "type": "string",
            "description": "HTTP status message",
            "example": "Bad Request"
          },
          "data": {
            "type": "object",
            "description": "Additional error data, often contains validation issues"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the category (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000001"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the category",
            "example": "user123"
          },
          "mealId": {
            "type": "string",
            "description": "Identifier of the meal this category belongs to",
            "example": "605c72ef29592b001c000000"
          },
          "name": {
            "type": "string",
            "description": "Name of the category",
            "example": "Breakfast"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the category was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the category was last updated",
            "readOnly": true
          }
        },
        "required": ["userId", "mealId", "name"]
      },
      "CategoryInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category",
            "minLength": 1,
            "example": "Lunch"
          }
        },
        "required": ["name"]
      },
      "CategoryUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category (optional for update)",
            "minLength": 1,
            "example": "Quick Lunch"
          }
        }
      },
      "CategoryCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item added successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "CategoryUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item updated successfully"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "Ingredient": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the ingredient (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000002"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the ingredient",
            "example": "user123"
          },
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category this ingredient belongs to",
            "example": "605c72ef29592b001c000001"
          },
          "name": {
            "type": "string",
            "description": "Name of the ingredient",
            "example": "Chicken Breast"
          },
          "calories": {
            "type": "number",
            "format": "float",
            "description": "Calories per 100g or per serving",
            "example": 165
          },
          "proteins": {
            "type": "number",
            "format": "float",
            "description": "Proteins per 100g or per serving",
            "example": 31
          },
          "grams": {
            "type": "number",
            "format": "float",
            "description": "Grams of the ingredient",
            "example": 100
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the ingredient was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the ingredient was last updated",
            "readOnly": true
          }
        },
        "required": [
          "userId",
          "categoryId",
          "name",
          "calories",
          "proteins",
          "grams"
        ]
      },
      "IngredientInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the ingredient",
            "minLength": 1,
            "example": "Raw Salmon"
          },
          "calories": {
            "type": "number",
            "format": "float",
            "description": "Calories",
            "minimum": 0,
            "example": 208
          },
          "proteins": {
            "type": "number",
            "format": "float",
            "description": "Proteins in grams",
            "minimum": 0,
            "example": 20
          },
          "grams": {
            "type": "number",
            "format": "float",
            "description": "Weight in grams",
            "minimum": 0,
            "example": 100
          }
        },
        "required": ["name", "calories", "proteins", "grams"]
      },
      "IngredientUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the ingredient (optional for update)",
            "minLength": 1,
            "example": "Cooked Salmon"
          },
          "calories": {
            "type": "number",
            "format": "float",
            "description": "Calories (optional for update)",
            "minimum": 0,
            "example": 220
          },
          "proteins": {
            "type": "number",
            "format": "float",
            "description": "Proteins in grams (optional for update)",
            "minimum": 0,
            "example": 22
          },
          "grams": {
            "type": "number",
            "format": "float",
            "description": "Weight in grams (optional for update)",
            "minimum": 0,
            "example": 120
          }
        }
      },
      "IngredientCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item added successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Ingredient"
          }
        }
      },
      "IngredientUpdateResponse": {
        "type": "object",
        "properties": {
          "ingredient": {
            "$ref": "#/components/schemas/Ingredient"
          }
        }
      },
      "MongoDeleteResult": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "example": true
          },
          "deletedCount": {
            "type": "integer",
            "example": 1
          }
        },
        "required": ["acknowledged", "deletedCount"]
      },
      "MealDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item deleted successfully"
          },
          "deletedMeals": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          },
          "deletedCategories": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          },
          "deletedIngredients": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          }
        },
        "required": [
          "message",
          "deletedMeals",
          "deletedCategories",
          "deletedIngredients"
        ]
      },
      "Set": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the set (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000000"
          },
          "userId": {
            "type": "string",
            "description": "Identifier of the user who owns the set",
            "example": "user123"
          },
          "ingredients": {
            "type": "array",
            "description": "Array of ingredient objects in the set",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Ingredient id",
                  "example": "ingr1"
                },
                "value": {
                  "type": "number",
                  "description": "Ingredient value",
                  "example": 10
                }
              },
              "required": ["id", "value"]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the set was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the set was last updated",
            "readOnly": true
          }
        },
        "required": ["userId", "ingredients"]
      },
      "SetInput": {
        "type": "object",
        "properties": {
          "ingredients": {
            "type": "array",
            "description": "Array of ingredient objects in the set",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Ingredient id",
                  "example": "ingr1"
                },
                "value": {
                  "type": "number",
                  "description": "Ingredient value",
                  "example": 10
                }
              },
              "required": ["id", "value"]
            }
          }
        },
        "required": ["ingredients"]
      },
      "SetUpdateInput": {
        "type": "object",
        "properties": {
          "ingredients": {
            "type": "array",
            "description": "Array of ingredient objects in the set (optional for update)",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Ingredient id",
                  "example": "ingr1"
                },
                "value": {
                  "type": "number",
                  "description": "Ingredient value",
                  "example": 10
                }
              },
              "required": ["id", "value"]
            }
          }
        }
      },
      "SetCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Set added successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Set"
          }
        }
      },
      "SetUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Set updated successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Set"
          }
        }
      },
      "SetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Set"
          }
        }
      },
      "SetDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Set deleted successfully"
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the template (MongoDB ObjectId)",
            "readOnly": true,
            "example": "605c72ef29592b001c000000"
          },
          "name": {
            "type": "string",
            "description": "Name of the template",
            "example": "Daily Meal Template"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the template was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the template was last updated",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "TemplateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the template",
            "minLength": 1,
            "example": "Weekly Meal Plan"
          }
        },
        "required": ["name"]
      },
      "TemplateUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the template (optional for update)",
            "minLength": 1,
            "example": "Updated Weekly Meal Plan"
          }
        }
      },
      "TemplateCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item added successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Template"
          }
        }
      },
      "TemplateUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Item updated successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Template"
          }
        }
      },
      "TemplateDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Template and all related data deleted successfully"
          },
          "deletedTemplates": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          },
          "deletedMeals": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          },
          "deletedCategories": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          },
          "deletedIngredients": {
            "$ref": "#/components/schemas/MongoDeleteResult"
          }
        },
        "required": [
          "message",
          "deletedTemplates",
          "deletedMeals",
          "deletedCategories",
          "deletedIngredients"
        ]
      },
      "TemplateApplyInput": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "ID of the user to apply the template to",
            "minLength": 1,
            "example": "user123"
          }
        },
        "required": ["userId"]
      },
      "TemplateApplyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Template applied successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "templateId": {
                "type": "string",
                "example": "605c72ef29592b001c000000"
              },
              "userId": {
                "type": "string",
                "example": "user123"
              },
              "applied": {
                "type": "object",
                "properties": {
                  "meals": {
                    "type": "integer",
                    "example": 2
                  },
                  "categories": {
                    "type": "integer",
                    "example": 4
                  },
                  "ingredients": {
                    "type": "integer",
                    "example": 12
                  }
                }
              },
              "createdMeals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Meal"
                }
              },
              "summary": {
                "type": "object",
                "properties": {
                  "templateName": {
                    "type": "string",
                    "example": "Daily Meal Template"
                  },
                  "appliedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "accessToken"
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    }
  ],
  "paths": {
    "/meals": {
      "post": {
        "summary": "Create a new meal",
        "tags": ["Meals"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MealCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of meals",
        "tags": ["Meals"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of meals to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of meals to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of meals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/meals/{id}": {
      "get": {
        "summary": "Get a specific meal with its categories and ingredients",
        "tags": ["Meals"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the meal to retrieve",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested meal with categories and ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MealWithCategoriesAndIngredients"
                }
              }
            }
          },
          "400": {
            "description": "Invalid meal ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing meal",
        "tags": ["Meals"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the meal to update",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meal updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MealUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a meal",
        "tags": ["Meals"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the meal to delete",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meal deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MealDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sets": {
      "post": {
        "summary": "Create a new set",
        "tags": ["Sets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of sets",
        "tags": ["Sets"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of sets to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of sets to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter sets created after this date (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter sets created before this date (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Set"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sets/{id}": {
      "get": {
        "summary": "Get a specific set by ID",
        "tags": ["Sets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the set to retrieve",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid set ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing set",
        "tags": ["Sets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the set to update",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid set ID format or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a set",
        "tags": ["Sets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the set to delete",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid set ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Get a list of all categories",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of categories to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{mealId}": {
      "post": {
        "summary": "Create a new category for a specific meal",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "required": true,
            "description": "ID of the meal to associate the category with",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of categories for a specific meal",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "required": true,
            "description": "ID of the meal to retrieve categories for",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of categories to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories for the specified meal, including their ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryWithIngredients"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid meal ID or query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{mealId}/{id}": {
      "put": {
        "summary": "Update an existing category",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "required": true,
            "description": "ID of the meal the category belongs to",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to update",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a category and its associated ingredients",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "required": true,
            "description": "ID of the meal the category belongs to",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000000"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to delete",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "summary": "Get a list of all ingredients for the authenticated user",
        "tags": ["Ingredients"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of ingredients to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of ingredients to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ingredients for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ingredients/{categoryId}": {
      "post": {
        "summary": "Create a new ingredient for a specific category",
        "tags": ["Ingredients"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to associate the ingredient with",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ingredient created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error, invalid input, or invalid category ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of ingredients for a specific category",
        "tags": ["Ingredients"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to retrieve ingredients for",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of ingredients to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of ingredients to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ingredients for the specified category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID or query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ingredients/{categoryId}/{id}": {
      "put": {
        "summary": "Update an existing ingredient",
        "tags": ["Ingredients"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category the ingredient belongs to",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the ingredient to update",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000002"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ingredient updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ingredient or Category not found, or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an ingredient",
        "tags": ["Ingredients"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category the ingredient belongs to",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000001"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the ingredient to delete",
            "schema": {
              "type": "string",
              "example": "605c72ef29592b001c000002"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ingredient deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ingredient or Category not found, or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/templates": {
      "post": {
        "summary": "Create a new template",
        "tags": ["Templates"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of templates",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of templates to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of templates to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "Get a specific template by ID",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the template to retrieve",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Invalid template ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing template",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the template to update",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a template and all related data",
        "description": "Deletes a template and cascades deletion to all related meals, categories, and ingredients",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the template to delete",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template and all related data deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/templates/{id}/apply": {
      "post": {
        "summary": "Apply a template to a specific user",
        "description": "Creates a copy of all template data (meals, categories, ingredients) and assigns it to the specified user",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the template to apply",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "605c72ef29592b001c000000"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateApplyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateApplyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid template ID or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to apply template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}
